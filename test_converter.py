"""
Script de exemplo e teste para o conversor PDF-Kindle
"""

import os
import sys
import tempfile
from pathlib import Path

# Adiciona o diret√≥rio atual ao path para importar nossos m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from pdf_to_kindle import PDFToKindleConverter
from table_extractor import AdvancedTableExtractor, ImagePreserver


def test_converter():
    """Testa as funcionalidades principais do conversor"""
    print("üß™ Testando Conversor PDF-Kindle")
    print("=" * 50)
    
    # Testa se as bibliotecas est√£o funcionando
    print("\nüìö Verificando bibliotecas:")
    
    try:
        import fitz
        print("‚úÖ PyMuPDF: OK")
    except ImportError:
        print("‚ùå PyMuPDF: N√£o instalado")
        return False
    
    try:
        import ebooklib
        print("‚úÖ EbookLib: OK")
    except ImportError:
        print("‚ùå EbookLib: N√£o instalado")
        return False
    
    try:
        import pandas
        print("‚úÖ Pandas: OK")
    except ImportError:
        print("‚ùå Pandas: N√£o instalado")
        return False
    
    try:
        from PIL import Image
        print("‚úÖ Pillow: OK")
    except ImportError:
        print("‚ùå Pillow: N√£o instalado")
        return False
    
    # Testa bibliotecas opcionais
    print("\nüìö Verificando bibliotecas opcionais:")
    
    try:
        import camelot
        print("‚úÖ Camelot: OK")
    except ImportError:
        print("‚ö†Ô∏è  Camelot: N√£o instalado (opcional)")
    
    try:
        import tabula
        print("‚úÖ Tabula: OK")
    except ImportError:
        print("‚ö†Ô∏è  Tabula: N√£o instalado (opcional)")
    
    try:
        import pdfplumber
        print("‚úÖ PDFPlumber: OK")
    except ImportError:
        print("‚ö†Ô∏è  PDFPlumber: N√£o instalado (opcional)")
    
    # Testa instancia√ß√£o das classes
    print("\nüîß Testando classes:")
    
    try:
        converter = PDFToKindleConverter()
        print("‚úÖ PDFToKindleConverter: OK")
    except Exception as e:
        print(f"‚ùå PDFToKindleConverter: Erro - {e}")
        return False
    
    try:
        extractor = AdvancedTableExtractor()
        print("‚úÖ AdvancedTableExtractor: OK")
        print(f"   M√©todos dispon√≠veis: {len(extractor.extraction_methods)}")
    except Exception as e:
        print(f"‚ùå AdvancedTableExtractor: Erro - {e}")
        return False
    
    try:
        preserver = ImagePreserver()
        print("‚úÖ ImagePreserver: OK")
    except Exception as e:
        print(f"‚ùå ImagePreserver: Erro - {e}")
        return False
    
    print("\n‚úÖ Todos os testes b√°sicos passaram!")
    return True


def create_sample_pdf():
    """Cria um PDF de exemplo para testar o conversor"""
    print("\nüìÑ Criando PDF de exemplo...")
    
    try:
        import fitz
        
        # Cria um documento PDF simples
        doc = fitz.open()
        
        # P√°gina 1: Texto formatado
        page1 = doc.new_page()
        
        # T√≠tulo
        page1.insert_text(
            (50, 100), 
            "Documento de Teste para Convers√£o Kindle",
            fontsize=18,
            fontname="helv",
            color=(0, 0, 0)
        )
        
        # Subt√≠tulo
        page1.insert_text(
            (50, 150),
            "Cap√≠tulo 1: Funcionalidades do Conversor",
            fontsize=14,
            fontname="helv",
            color=(0.2, 0.2, 0.2)
        )
        
        # Par√°grafo normal
        texto = """Este √© um documento de teste criado para demonstrar as capacidades do conversor PDF-Kindle. 
        
O conversor deve preservar:
‚Ä¢ Formata√ß√£o de texto (negrito, it√°lico)
‚Ä¢ Tamanhos de fonte diferentes
‚Ä¢ Espa√ßamento entre par√°grafos
‚Ä¢ Estrutura hier√°rquica do documento

Este par√°grafo cont√©m texto normal que deve ser convertido mantendo a formata√ß√£o original."""
        
        page1.insert_text(
            (50, 200),
            texto,
            fontsize=12,
            fontname="helv"
        )
        
        # P√°gina 2: Tabela simulada
        page2 = doc.new_page()
        
        page2.insert_text(
            (50, 100),
            "Cap√≠tulo 2: Teste de Tabelas",
            fontsize=16,
            fontname="helv"
        )
        
        # Simula uma tabela com texto
        table_text = """Produto          Pre√ßo    Quantidade
Notebook         R$ 2.500    5
Mouse            R$ 50       20
Teclado          R$ 150      15
Monitor          R$ 800      8"""
        
        page2.insert_text(
            (50, 150),
            table_text,
            fontsize=10,
            fontname="cour"  # Fonte monoespa√ßada para simular tabela
        )
        
        # Salva o PDF
        sample_path = "documento_teste.pdf"
        doc.save(sample_path)
        doc.close()
        
        print(f"‚úÖ PDF de exemplo criado: {sample_path}")
        return sample_path
        
    except Exception as e:
        print(f"‚ùå Erro ao criar PDF de exemplo: {e}")
        return None


def demo_conversion():
    """Demonstra a convers√£o de um PDF"""
    print("\nüîÑ Demonstra√ß√£o de Convers√£o")
    print("=" * 30)
    
    # Cria PDF de exemplo
    sample_pdf = create_sample_pdf()
    if not sample_pdf:
        print("‚ùå N√£o foi poss√≠vel criar PDF de exemplo")
        return
    
    try:
        # Converte o PDF
        with PDFToKindleConverter("epub") as converter:
            output_file = converter.convert_pdf(sample_pdf)
            
            print(f"‚úÖ Convers√£o conclu√≠da!")
            print(f"üìñ Arquivo gerado: {output_file}")
            
            # Verifica se o arquivo foi criado
            if os.path.exists(output_file):
                file_size = os.path.getsize(output_file)
                print(f"üìè Tamanho do arquivo: {file_size:,} bytes")
            
            return output_file
            
    except Exception as e:
        print(f"‚ùå Erro na convers√£o: {e}")
        return None
    
    finally:
        # Limpa arquivo tempor√°rio
        if os.path.exists(sample_pdf):
            try:
                os.remove(sample_pdf)
                print(f"üóëÔ∏è  Arquivo tempor√°rio removido: {sample_pdf}")
            except:
                pass


def show_usage_examples():
    """Mostra exemplos de uso"""
    print("\nüìñ Exemplos de Uso")
    print("=" * 20)
    
    print("""
üí° Convers√£o b√°sica:
   python pdf_to_kindle.py "meu_documento.pdf"

üí° Especificar arquivo de sa√≠da:
   python pdf_to_kindle.py "documento.pdf" -o "livro.epub"

üí° Modo verboso:
   python pdf_to_kindle.py "documento.pdf" -v

üí° Usar via c√≥digo Python:
   from pdf_to_kindle import PDFToKindleConverter
   
   with PDFToKindleConverter("epub") as converter:
       output = converter.convert_pdf("documento.pdf")
       print(f"Arquivo gerado: {output}")

üìã Formatos suportados:
   ‚Ä¢ Entrada: PDF
   ‚Ä¢ Sa√≠da: EPUB (MOBI via Calibre)

üéØ Recursos preservados:
   ‚Ä¢ Formata√ß√£o de texto (negrito, it√°lico, tamanhos)
   ‚Ä¢ Imagens (otimizadas para e-readers)
   ‚Ä¢ Tabelas (convertidas para HTML)
   ‚Ä¢ Estrutura hier√°rquica (t√≠tulos, par√°grafos)
   ‚Ä¢ Espa√ßamento e layout

‚öôÔ∏è  Para melhor extra√ß√£o de tabelas, instale:
   pip install camelot-py[cv] tabula-py pdfplumber
""")


def main():
    """Fun√ß√£o principal do script de teste"""
    print("üöÄ Conversor PDF-Kindle - Script de Teste e Exemplo")
    print("=" * 60)
    
    # Executa testes
    if not test_converter():
        print("\n‚ùå Alguns testes falharam. Verifique a instala√ß√£o das depend√™ncias.")
        print("üí° Execute: pip install -r requirements.txt")
        return
    
    # Demonstra convers√£o
    demo_conversion()
    
    # Mostra exemplos de uso
    show_usage_examples()
    
    print("\nüéâ Teste conclu√≠do com sucesso!")
    print("üîó Para usar o conversor, execute: python pdf_to_kindle.py \"seu_arquivo.pdf\"")


if __name__ == "__main__":
    main()
